Understanding Time Complexity with Simple Examples - GeeksforGeeks , GeeksforGeeks × search Custom Search Sort by: Relevance Relevance Date x × Suggest a Topic Select a Category Advanced Computer Subject Advanced Data Structure Algorithms Algorithms Quiz Analysis AngularJS Aptitude Arrays Articles Articles Backtracking Binary Search Tree Bit Magic Bootstrap Branch and Bound C C Programs C Quiz C# C# Programs C++ C++ Programs C++ Quiz CAT CAT Quiz Combinatorial Competitive Programming Compiler Design Compiler Design Computer Networks Computer Networks Quiz Computer Organization & Architecture Computer Organization and Architecture Computer Science Quizzes Computer Subject CS – Placements CSS Dart Data Structures Data Structures DBMS DBMS Quiz Design Pattern DI – Placements Difference Between Digital Electronics & Logic Design Divide and Conquer Dynamic Programming Engineering Mathematics Engineering Mathematics Questions English – Placements Experienced Full Form Game Theory GATE GATE CS GBlog Geek on the Top GeeksforGeeks Initiatives GeeksQuiz Geometric GFacts Git Go Language Graph GRE GRE Quiz Greedy Hadoop Hash Heap How To HTML Internship Interview Experiences ISRO Java Java Programs Java Quiz JavaScript JQuery JS++ Julia Kotlin Linked List Linux-Unix Machine Learning Mathematical Matrix MCQ Misc MongoDB Node.js Operating Systems Operating Systems Questions Pattern Searching Perl PHP PHP Programs Placements PostgreSQL Program Output Programming Language Project Puzzles Python Python Programs Python-Quizzes QA – Placement Quizzes QA – Placements Queue Quizzes R Language Randomized Reasoning – Placements Recursion Ruby Scala School Programming Searching Software Engineering Solidity Sorting SQL Stack Strings Tableau Technical Scripter TechTips test_cat_june Theory of Computation Theory of Computation & Automata Tree UGC-NET Web Technologies Web technologies Questions Write From Home Submit menu Skip to content Tutorialskeyboard_arrow_down Algorithmskeyboard_arrow_right Analysis of Algorithmskeyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does ‘Space Complexity’ mean? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structureskeyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languageskeyboard_arrow_right C C++ Java Python C# Javascript JQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Cornerkeyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes GATEkeyboard_arrow_right GATE CS Notes 2020 Last Minute Notes GATE CS Solved Papers GATE CS Orignal Papers and Official Keys GATE 2020 Dates GATE CS 2020 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CSkeyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CSkeyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjectskeyboard_arrow_right Mathematics Operating Systems DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologieskeyboard_arrow_right HTML CSS JavaScript PHP JQuery Studentskeyboard_arrow_down Get Hired Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competitive Programming Testimonials Geek on the Top Careers Internship MenuTutorials- Algorithms-- Analysis of Algorithms--- Asymptotic Analysis--- Worst, Average and Best Cases--- Asymptotic Notations--- Little o and little omega notations--- Lower and Upper Bound Theory--- Analysis of Loops--- Solving Recurrences--- Amortized Analysis--- What does ‘Space Complexity’ mean?--- Pseudo-polynomial Algorithms--- Polynomial Time Approximation Scheme--- A Time Complexity Question-- Searching Algorithms-- Sorting Algorithms-- Graph Algorithms-- Pattern Searching-- Geometric Algorithms-- Mathematical-- Randomized Algorithms-- Greedy Algorithms-- Dynamic Programming-- Divide and Conquer-- Backtracking-- Branch and Bound-- All Algorithms- Data Structures-- Arrays-- Linked List-- Stack-- Queue-- Binary Tree-- Binary Search Tree-- Heap-- Hashing-- Graph-- Advanced Data Structure-- Matrix-- Strings-- All Data Structures- Languages-- C-- C++-- Java-- Python-- C#-- Javascript-- JQuery-- SQL-- PHP-- Scala-- Perl-- Go Language-- HTML-- CSS-- Kotlin- Interview Corner-- Company Preparation-- Top Topics-- Practice Company Questions-- Interview Experiences-- Experienced Interviews-- Internship Interviews-- Competitive Programming-- Design Patterns-- Multiple Choice Quizzes- GATE-- GATE CS Notes 2020-- Last Minute Notes-- GATE CS Solved Papers-- GATE CS Orignal Papers and Official Keys-- GATE 2020 Dates-- GATE CS 2020 Syllabus-- Important Topics for GATE CS-- Sudo GATE 2021- ISRO CS-- ISRO CS Solved Papers-- ISRO CS Original Papers and Official Keys-- ISRO CS Syllabus for Scientist/Engineer Exam- UGC NET CS-- UGC NET CS Notes Paper II-- UGC NET CS Notes Paper III-- UGC NET CS Solved Papers- CS Subjects-- Mathematics-- Operating Systems-- DBMS-- Computer Networks-- Computer Organization and Architecture-- Theory of Computation-- Compiler Design-- Digital Logic-- Software Engineering- Web Technologies-- HTML-- CSS-- JavaScript-- PHP-- JQueryStudents- Get Hired- Campus Ambassador Program- Project- Geek of the Month- Campus Geek of the Month- Placement Course- Competitive Programming- Testimonials- Geek on the Top- Careers- Internship Courses Home Algorithms expand_more All Algorithms Analysis of Algorithms Searching Algorithms Sorting Algorithms Graph Algorithms Bit Algorithms Pattern Searching Geometric Algorithms Mathematical Algorithms Randomized Algorithms Game Theory Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch & Bound Data Structures expand_more All Data Structures Array LinkedList Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings Languages expand_more C C++ Java Python SQL PHP Javascript Program Output Interview expand_more Company Prep Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes Students expand_more Campus Ambassador Program Geek of the Month Placement Course Project Competitive Programming Testimonials Geek on the Top Careers Internship School Programming GATE expand_more GATE CS Corner GATE Notes Last Minute Notes Official Papers Gate 2018 Important Dates and Links CS Subjects expand_more Operating Systems DBMS Computer Networks Compiler Design Web Technology Computer Organization & Architecture Digital Electronics Engg. Mathematics Theory of Computation Advanced Topics What’s Difference? Quizzes expand_more C C++ Java Python Data Structures Algorithms Operating Systems DBMS Compiler Design Computer Networks Theory of Computation Computer Organization Software Engineering HTML & XML Engg. Mathematics Aptitude GBlog Puzzles What’s New? × search Custom Search Sort by: Relevance Relevance Date Login Hire with us!Understanding Time Complexity with Simple Examples , Understanding Time Complexity with Simple Examples - GeeksforGeeks GeeksforGeeks × search Custom Search Sort by: Relevance Relevance Date x × Suggest a Topic Select a Category Advanced Computer Subject Advanced Data Structure Algorithms Algorithms Quiz Analysis AngularJS Aptitude Arrays Articles Articles Backtracking Binary Search Tree Bit Magic Bootstrap Branch and Bound C C Programs C Quiz C# C# Programs C++ C++ Programs C++ Quiz CAT CAT Quiz Combinatorial Competitive Programming Compiler Design Compiler Design Computer Networks Computer Networks Quiz Computer Organization & Architecture Computer Organization and Architecture Computer Science Quizzes Computer Subject CS – Placements CSS Dart Data Structures Data Structures DBMS DBMS Quiz Design Pattern DI – Placements Difference Between Digital Electronics & Logic Design Divide and Conquer Dynamic Programming Engineering Mathematics Engineering Mathematics Questions English – Placements Experienced Full Form Game Theory GATE GATE CS GBlog Geek on the Top GeeksforGeeks Initiatives GeeksQuiz Geometric GFacts Git Go Language Graph GRE GRE Quiz Greedy Hadoop Hash Heap How To HTML Internship Interview Experiences ISRO Java Java Programs Java Quiz JavaScript JQuery JS++ Julia Kotlin Linked List Linux-Unix Machine Learning Mathematical Matrix MCQ Misc MongoDB Node.js Operating Systems Operating Systems Questions Pattern Searching Perl PHP PHP Programs Placements PostgreSQL Program Output Programming Language Project Puzzles Python Python Programs Python-Quizzes QA – Placement Quizzes QA – Placements Queue Quizzes R Language Randomized Reasoning – Placements Recursion Ruby Scala School Programming Searching Software Engineering Solidity Sorting SQL Stack Strings Tableau Technical Scripter TechTips test_cat_june Theory of Computation Theory of Computation & Automata Tree UGC-NET Web Technologies Web technologies Questions Write From Home Submit menu Skip to content Tutorialskeyboard_arrow_down Algorithmskeyboard_arrow_right Analysis of Algorithmskeyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does ‘Space Complexity’ mean? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structureskeyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languageskeyboard_arrow_right C C++ Java Python C# Javascript JQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Cornerkeyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes GATEkeyboard_arrow_right GATE CS Notes 2020 Last Minute Notes GATE CS Solved Papers GATE CS Orignal Papers and Official Keys GATE 2020 Dates GATE CS 2020 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CSkeyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CSkeyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjectskeyboard_arrow_right Mathematics Operating Systems DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologieskeyboard_arrow_right HTML CSS JavaScript PHP JQuery Studentskeyboard_arrow_down Get Hired Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competitive Programming Testimonials Geek on the Top Careers Internship MenuTutorials- Algorithms-- Analysis of Algorithms--- Asymptotic Analysis--- Worst, Average and Best Cases--- Asymptotic Notations--- Little o and little omega notations--- Lower and Upper Bound Theory--- Analysis of Loops--- Solving Recurrences--- Amortized Analysis--- What does ‘Space Complexity’ mean?--- Pseudo-polynomial Algorithms--- Polynomial Time Approximation Scheme--- A Time Complexity Question-- Searching Algorithms-- Sorting Algorithms-- Graph Algorithms-- Pattern Searching-- Geometric Algorithms-- Mathematical-- Randomized Algorithms-- Greedy Algorithms-- Dynamic Programming-- Divide and Conquer-- Backtracking-- Branch and Bound-- All Algorithms- Data Structures-- Arrays-- Linked List-- Stack-- Queue-- Binary Tree-- Binary Search Tree-- Heap-- Hashing-- Graph-- Advanced Data Structure-- Matrix-- Strings-- All Data Structures- Languages-- C-- C++-- Java-- Python-- C#-- Javascript-- JQuery-- SQL-- PHP-- Scala-- Perl-- Go Language-- HTML-- CSS-- Kotlin- Interview Corner-- Company Preparation-- Top Topics-- Practice Company Questions-- Interview Experiences-- Experienced Interviews-- Internship Interviews-- Competitive Programming-- Design Patterns-- Multiple Choice Quizzes- GATE-- GATE CS Notes 2020-- Last Minute Notes-- GATE CS Solved Papers-- GATE CS Orignal Papers and Official Keys-- GATE 2020 Dates-- GATE CS 2020 Syllabus-- Important Topics for GATE CS-- Sudo GATE 2021- ISRO CS-- ISRO CS Solved Papers-- ISRO CS Original Papers and Official Keys-- ISRO CS Syllabus for Scientist/Engineer Exam- UGC NET CS-- UGC NET CS Notes Paper II-- UGC NET CS Notes Paper III-- UGC NET CS Solved Papers- CS Subjects-- Mathematics-- Operating Systems-- DBMS-- Computer Networks-- Computer Organization and Architecture-- Theory of Computation-- Compiler Design-- Digital Logic-- Software Engineering- Web Technologies-- HTML-- CSS-- JavaScript-- PHP-- JQueryStudents- Get Hired- Campus Ambassador Program- Project- Geek of the Month- Campus Geek of the Month- Placement Course- Competitive Programming- Testimonials- Geek on the Top- Careers- Internship Courses Home Algorithms expand_more All Algorithms Analysis of Algorithms Searching Algorithms Sorting Algorithms Graph Algorithms Bit Algorithms Pattern Searching Geometric Algorithms Mathematical Algorithms Randomized Algorithms Game Theory Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch & Bound Data Structures expand_more All Data Structures Array LinkedList Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings Languages expand_more C C++ Java Python SQL PHP Javascript Program Output Interview expand_more Company Prep Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes Students expand_more Campus Ambassador Program Geek of the Month Placement Course Project Competitive Programming Testimonials Geek on the Top Careers Internship School Programming GATE expand_more GATE CS Corner GATE Notes Last Minute Notes Official Papers Gate 2018 Important Dates and Links CS Subjects expand_more Operating Systems DBMS Computer Networks Compiler Design Web Technology Computer Organization & Architecture Digital Electronics Engg. Mathematics Theory of Computation Advanced Topics What’s Difference? Quizzes expand_more C C++ Java Python Data Structures Algorithms Operating Systems DBMS Compiler Design Computer Networks Theory of Computation Computer Organization Software Engineering HTML & XML Engg. Mathematics Aptitude GBlog Puzzles What’s New? × search Custom Search Sort by: Relevance Relevance Date Login Hire with us! ▲ Understanding Time Complexity with Simple Examples Practice Questions on Time Complexity Analysis Minimize the maximum difference between adjacent elements in an array Expected Number of Trials to get N Consecutive Heads Design a data structure that supports insert, delete, getRandom in O(1) with duplicates Shortest Palindromic Substring Longest Palindrome in a String formed by concatenating its prefix and suffix Generate an array of given size with equal count and sum of odd and even numbers Paranthesis Theorem XOR of elements in a given range with updates using Fenwick Tree Number of ways to place two queens on a N*N chess-board Find intersection of intervals given by two lists Count of subarrays of size K which is a permutation of numbers from 1 to K Find a N-digit number such that it is not divisible by any of its digits Find and Count total factors of co-prime A or B in a given range 1 to N Number of ways to color N-K blocks using given operation Maximum length Subsequence with alternating sign and maximum Sum Count of elements which form a loop in an Array according to given constraints Difference between NP hard and NP complete problem Sum and Product of all even digit sum Nodes of a Singly Linked List Nodes with prime degree in an undirected Graph Create an array such that XOR of subarrays of length K is X Minimum sprinklers required to water a rectangular park Group all co-prime numbers from 1 to N Count of pairs in a given range with sum of their product and sum equal to their concatenated number Check if all nodes of the Binary Tree can be represented as sum of two primes C program for Time Complexity plot of Bubble, Insertion and Selection Sort using Gnuplot Count of even and odd set bit with array element after XOR with K Minimum concatenation required to get strictly LIS for array with repetitive elements | Set-2 Queries to find frequencies of a string within specified substrings Understanding Time Complexity with Simple Examples A lot of students get confused while understanding the concept of time-complexity, but in this article, we will explain it with a very simple example: Imagine a classroom of 100 students in which you gave your pen to one person. Now, you want that pen. Here are some ways to find the pen and what the O order is. O(n2): You go and ask the first person of the class, if he has the pen. Also, you ask this person about other 99 people in the classroom if they have that pen and so on, This is what we call O(n2). O(n): Going and asking each student individually is O(N). O(log n): Now I divide the class into two groups, then ask: “Is it on the left side, or the right side of the classroom?” Then I take that group and divide it into two and ask again, and so on. Repeat the process till you are left with one student who has your pen. This is what you mean by O(log n). I might need to do the O(n2) search if only one student knows on which student the pen is hidden. I’d use the O(n) if one student had the pen and only they knew it. I’d use the O(log n) search if all the students knew, but would only tell me if I guessed the right side. NOTE : We are interested in rate of growth of time with respect to the inputs taken during the program execution . Another Example Time Complexity of algorithm/code is not equal to the actual time required to execute a particular code but the number of times a statement executes. We can prove this by using time command. For example, Write code in C/C++ or any other language to find maximum between N numbers, where N varies from 10, 100, 1000, 10000. And compile that code on Linux based operating system (Fedora or Ubuntu) with below command: gcc program.c – o program
run it with time ./program You will get surprising results i.e. for N = 10 you may get 0.5ms time and for N = 10, 000 you may get 0.2 ms time. Also, you will get different timings on the different machine. So, we can say that actual time requires to execute code is machine dependent (whether you are using pentium1 or pentiun5) and also it considers network load if your machine is in LAN/WAN. Even you will not get the same timings on the same machine for the same code, the reason behind that the current network load. Now, the question arises if time complexity is not the actual time require executing the code then what is it? The answer is : Instead of measuring actual time required in executing each statement in the code, we consider how many times each statement execute. For example: filter_none edit close play_arrow link brightness_4 code #include <stdio.h> int main() { printf("Hello World"); } chevron_right filter_none Output: Hello World
 In above code “Hello World!!!” print only once on a screen. So, time complexity is constant: O(1) i.e. every time constant amount of time require to execute code, no matter which operating system or which machine configurations you are using. Now consider another code: filter_none edit close play_arrow link brightness_4 code #include <stdio.h> void main() { int i, n = 8; for (i = 1; i <= n; i++) { printf("Hello Word !!!"); } } chevron_right filter_none Output: Hello Word !!!Hello Word !!!Hello Word !!!Hello Word !!!
Hello Word !!!Hello Word !!!Hello Word !!!Hello Word !!!
 In above code “Hello World!!!” will print N times. So, time complexity of above code is O(N). Source : Reddit ADDITIONAL INFORMATION : For example: Let us consider a model machine which has the following specifications: –Single processor –32 bit –Sequential execution –1 unit time for arithmetic and logical operations –1 unit time for assignment and return statements 1.Sum of 2 numbers : filter_none edit close play_arrow link brightness_4 code Pseudocode: Sum(a,b){ return a+b //Takes 2 unit of time(constant) one for arithmetic operation and one for return.(as per above conventions) cost=2 no of times=1 } chevron_right filter_none Tsum= 2 = C =O(1) 2.Sum of all elements of a list : filter_none edit close play_arrow link brightness_4 code Pseudocode: list_Sum(A,n){//A->array and n->number of elements in the array total =0 // cost=1 no of times=1 for i=0 to n-1 // cost=2 no of times=n+1 (+1 for the end false condition) sum = sum + A[i] // cost=2 no of times=n return sum // cost=1 no of times=1 } chevron_right filter_none Tsum=1 + 2 * (n+1) + 2 * n + 1 = 4n + 1 =C1 * n + C2 = O(n) 3.Sum of all elements of a matrix : For this one the complexity is a polynomial equation (quadratic equation for a square matrix) Matrix nxn => Tsum= an2 +bn + c For this Tsum if in order of n2 = O(2) The above codes do not run in the IDE as they are pseudo codes and do not resemble any programming language . So from the above, we can conclude that the time of execution increases with the type of operations we make using the inputs. The above O -> is called Big – Oh which is an asymptotic notation. There are other asymptotic notations like theta and Ohm. You can refer : Read about asymptotic notations The additional information provided author of this article is Pathange Balaji Rao. Don’t stop now and take your learning to the next level. Learn all the important concepts of Data Structures and Algorithms with the help of the most trusted course: DSA Self Paced. Become industry ready at a student-friendly price. My Personal Notes arrow_drop_up Save Recommended Posts: A Time Complexity Question An interesting time complexity question Time Complexity of Loop with Powers Time Complexity of building a heap Time Complexity where loop variable is incremented by 1, 2, 3, 4 .. Practice Questions on Time Complexity Analysis Time complexity of recursive Fibonacci program Time Complexity Analysis | Tower Of Hanoi (Recursion) Python Code for time Complexity plot of Heap Sort C program for Time Complexity plot of Bubble, Insertion and Selection Sort using Gnuplot Time Complexity of a Loop when Loop variable “Expands or Shrinks” exponentially What does 'Space Complexity' mean? Cyclomatic Complexity Knowing the complexity in competitive programming Complexity Analysis of Binary Search Complexity analysis of various operations of Binary Min Heap Complexity of different operations in Binary tree, Binary Search Tree and AVL tree Measure execution time with high precision in C/C++ Algorithms Sample Questions | Set 3 | Time Order Analysis Microsoft Interview experience for full time position of software engineer at Microsoft Ireland Research Dhawal Arora Check out this Author's contributed articles. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Improved By : BalajiPathange Article Tags : Analysis thumb_up 35 To-do Done 2.3 Based on 19 vote(s) Feedback/ Suggest ImprovementImprove Article Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Iterated Logarithm log*(n) Next last_page Practice Questions on Time Complexity Analysis Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Last digit of a number raised to last digit of N factorial Proof that traveling salesman problem is NP Hard Proof that Hamiltonian Cycle is NP-Complete Proof that Dominant Set of a Graph is NP-Complete Two player game in which a player can remove all occurrences of a number More related articles in Analysis Find farthest node from each node in Tree Minimum valued node having maximum depth in an N-ary Tree How to find last index of a number in an Array in C++ Count of ungrouped characters after dividing a string into K groups of distinct characters Count of elements which are power of 2 in a given range subarray for Q queries Write a Testimonial ⇣ 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.org COMPANY About Us Careers Privacy Policy Contact Us LEARN Algorithms Data Structures Languages CS Subjects Video Tutorials PRACTICE Courses Company-wise Topic-wise How to begin? CONTRIBUTE Write an Article Write Interview Experience Internships Videos @geeksforgeeks, Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !