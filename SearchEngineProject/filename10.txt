Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) - GeeksforGeeks , GeeksforGeeks x × Suggest a Topic Select a Category Advanced Computer Subject Advanced Data Structure Algorithms Algorithms Quiz Analysis AngularJS Aptitude Arrays Articles Articles Backtracking Binary Search Tree Bit Magic Bootstrap Branch and Bound C C Programs C Quiz C# C# Programs C++ C++ Programs C++ Quiz CAT CAT Quiz Combinatorial Competitive Programming Compiler Design Compiler Design Computer Networks Computer Networks Quiz Computer Organization & Architecture Computer Organization and Architecture Computer Science Quizzes Computer Subject CS – Placements CSS Dart Data Structures Data Structures DBMS DBMS Quiz Design Pattern DI – Placements Difference Between Digital Electronics & Logic Design Divide and Conquer Dynamic Programming Engineering Mathematics Engineering Mathematics Questions English – Placements Experienced Full Form Game Theory GATE GATE CS GBlog Geek on the Top GeeksforGeeks Initiatives GeeksQuiz Geometric GFacts Git Go Language Graph GRE GRE Quiz Greedy Hadoop Hash Heap How To HTML Internship Interview Experiences ISRO Java Java Programs Java Quiz JavaScript JQuery JS++ Julia Kotlin Linked List Linux-Unix Machine Learning Mathematical Matrix MCQ Misc MongoDB Node.js Operating Systems Operating Systems Questions Pattern Searching Perl PHP PHP Programs Placements PostgreSQL Program Output Programming Language Project Puzzles Python Python Programs Python-Quizzes QA – Placement Quizzes QA – Placements Queue Quizzes R Language Randomized Reasoning – Placements Recursion Ruby Scala School Programming Searching Software Engineering Solidity Sorting SQL Stack Strings Tableau Technical Scripter TechTips test_cat_june Theory of Computation Theory of Computation & Automata Tree UGC-NET Web Technologies Web technologies Questions Write From Home Submit menu Skip to content Tutorials Algorithms Analysis of Algorithms Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does ‘Space Complexity’ mean? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages C C++ Java Python C# Javascript JQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes GATE GATE CS Notes 2020 Last Minute Notes GATE CS Solved Papers GATE CS Orignal Papers and Official Keys GATE 2020 Dates GATE CS 2020 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects Mathematics Operating Systems DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies HTML CSS JavaScript PHP JQuery Students Get Hired Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competitive Programming Testimonials Geek on the Top Careers Internship Courses Home Algorithms expand_more All Algorithms Analysis of Algorithms Searching Algorithms Sorting Algorithms Graph Algorithms Bit Algorithms Pattern Searching Geometric Algorithms Mathematical Algorithms Randomized Algorithms Game Theory Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch & Bound Data Structures expand_more All Data Structures Array LinkedList Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings Languages expand_more C C++ Java Python SQL PHP Javascript Program Output Interview expand_more Company Prep Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes Students expand_more Campus Ambassador Program Geek of the Month Placement Course Project Competitive Programming Testimonials Geek on the Top Careers Internship School Programming GATE expand_more GATE CS Corner GATE Notes Last Minute Notes Official Papers Gate 2018 Important Dates and Links CS Subjects expand_more Operating Systems DBMS Computer Networks Compiler Design Web Technology Computer Organization & Architecture Digital Electronics Engg. Mathematics Theory of Computation Advanced Topics What’s Difference? Quizzes expand_more C C++ Java Python Data Structures Algorithms Operating Systems DBMS Compiler Design Computer Networks Theory of Computation Computer Organization Software Engineering HTML & XML Engg. Mathematics Aptitude GBlog Puzzles What’s New? Hire with us!Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) , GeeksforGeeks x × Suggest a Topic Select a Category Advanced Computer Subject Advanced Data Structure Algorithms Algorithms Quiz Analysis AngularJS Aptitude Arrays Articles Articles Backtracking Binary Search Tree Bit Magic Bootstrap Branch and Bound C C Programs C Quiz C# C# Programs C++ C++ Programs C++ Quiz CAT CAT Quiz Combinatorial Competitive Programming Compiler Design Compiler Design Computer Networks Computer Networks Quiz Computer Organization & Architecture Computer Organization and Architecture Computer Science Quizzes Computer Subject CS – Placements CSS Dart Data Structures Data Structures DBMS DBMS Quiz Design Pattern DI – Placements Difference Between Digital Electronics & Logic Design Divide and Conquer Dynamic Programming Engineering Mathematics Engineering Mathematics Questions English – Placements Experienced Full Form Game Theory GATE GATE CS GBlog Geek on the Top GeeksforGeeks Initiatives GeeksQuiz Geometric GFacts Git Go Language Graph GRE GRE Quiz Greedy Hadoop Hash Heap How To HTML Internship Interview Experiences ISRO Java Java Programs Java Quiz JavaScript JQuery JS++ Julia Kotlin Linked List Linux-Unix Machine Learning Mathematical Matrix MCQ Misc MongoDB Node.js Operating Systems Operating Systems Questions Pattern Searching Perl PHP PHP Programs Placements PostgreSQL Program Output Programming Language Project Puzzles Python Python Programs Python-Quizzes QA – Placement Quizzes QA – Placements Queue Quizzes R Language Randomized Reasoning – Placements Recursion Ruby Scala School Programming Searching Software Engineering Solidity Sorting SQL Stack Strings Tableau Technical Scripter TechTips test_cat_june Theory of Computation Theory of Computation & Automata Tree UGC-NET Web Technologies Web technologies Questions Write From Home Submit menu Skip to content Tutorials Algorithms Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does ‘Space Complexity’ mean? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages C C++ Java Python C# Javascript JQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes GATE GATE CS Notes 2020 Last Minute Notes GATE CS Solved Papers GATE CS Orignal Papers and Official Keys GATE 2020 Dates GATE CS 2020 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects Mathematics Operating Systems DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies HTML CSS JavaScript PHP JQuery Students Get Hired Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competitive Programming Testimonials Geek on the Top Careers Internship Courses Home Algorithms expand_more All Algorithms Searching Algorithms Sorting Algorithms Graph Algorithms Bit Algorithms Pattern Searching Geometric Algorithms Mathematical Algorithms Randomized Algorithms Game Theory Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch & Bound Data Structures expand_more All Data Structures Array LinkedList Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings Languages expand_more C C++ Java Python SQL PHP Javascript Program Output Interview expand_more Company Prep Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes Students expand_more Campus Ambassador Program Geek of the Month Placement Course Project Competitive Programming Testimonials Geek on the Top Careers Internship School Programming GATE expand_more GATE CS Corner GATE Notes Last Minute Notes Official Papers Gate 2018 Important Dates and Links CS Subjects expand_more Operating Systems DBMS Computer Networks Compiler Design Web Technology Computer Organization & Architecture Digital Electronics Engg. Mathematics Theory of Computation Advanced Topics What’s Difference? Quizzes expand_more C C++ Java Python Data Structures Algorithms Operating Systems DBMS Compiler Design Computer Networks Theory of Computation Computer Organization Software Engineering HTML & XML Engg. Mathematics Aptitude GBlog Puzzles What’s New? Hire with us! ▲ | Set 1 (Asymptotic Analysis) | Set 2 (Worst, Average and Best Cases) | Set 3 (Asymptotic Notations) | Set 4 (Analysis of Loops) Analysis of Algorithm | Set 4 (Solving Recurrences) Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) Minimize the maximum difference between adjacent elements in an array Expected Number of Trials to get N Consecutive Heads Design a data structure that supports insert, delete, getRandom in O(1) with duplicates Shortest Palindromic Substring Longest Palindrome in a String formed by concatenating its prefix and suffix Generate an array of given size with equal count and sum of odd and even numbers Paranthesis Theorem XOR of elements in a given range with updates using Fenwick Tree Number of ways to place two queens on a N*N chess-board Find intersection of intervals given by two lists Count of subarrays of size K which is a permutation of numbers from 1 to K Find a N-digit number such that it is not divisible by any of its digits Find and Count total factors of co-prime A or B in a given range 1 to N Number of ways to color N-K blocks using given operation Maximum length Subsequence with alternating sign and maximum Sum Count of elements which form a loop in an Array according to given constraints Difference between NP hard and NP complete problem Sum and Product of all even digit sum Nodes of a Singly Linked List Nodes with prime degree in an undirected Graph Create an array such that XOR of subarrays of length K is X Minimum sprinklers required to water a rectangular park Group all co-prime numbers from 1 to N Count of pairs in a given range with sum of their product and sum equal to their concatenated number Check if all nodes of the Binary Tree can be represented as sum of two primes | Set 2 (Worst, Average and Best Cases) In the previous post, we discussed how Asymptotic analysis overcomes the problems of naive way of analyzing algorithms. In this post, we will take an example of Linear Search and analyze it using Asymptotic analysis. We can have three cases to analyze an algorithm: 1) Worst Case 2) Average Case 3) Best Case Let us consider the following implementation of Linear Search. C++ filter_none edit close play_arrow link brightness_4 code // C++ implementation of the approach #include <bits/stdc++.h> using namespace std; // Linearly search x in arr[]. // If x is present then return the index, // otherwise return -1 int search(int arr[], int n, int x) { int i; for (i=0; i<n; i++) { if (arr[i] == x) return i; } return -1; } // Driver Code int main() { int arr[] = {1, 10, 30, 15}; int x = 30; int n = sizeof(arr)/sizeof(arr[0]); cout << x << " is present at index " << search(arr, n, x); getchar(); return 0; } // This code is contributed // by Akanksha Rai chevron_right filter_none C filter_none edit close play_arrow link brightness_4 code // C implementation of the approach #include <stdio.h> // Linearly search x in arr[]. // If x is present then return the index, // otherwise return -1 int search(int arr[], int n, int x) { int i; for (i=0; i<n; i++) { if (arr[i] == x) return i; } return -1; } /* Driver program to test above functions*/ int main() { int arr[] = {1, 10, 30, 15}; int x = 30; int n = sizeof(arr)/sizeof(arr[0]); printf("%d is present at index %d", x, search(arr, n, x)); getchar(); return 0; } chevron_right filter_none Java filter_none edit close play_arrow link brightness_4 code // Java implementation of the approach public class GFG { // Linearly search x in arr[]. If x is present then return the index, // otherwise return -1 static int search(int arr[], int n, int x) { int i; for (i = 0; i < n; i++) { if (arr[i] == x) { return i; } } return -1; } /* Driver program to test above functions*/ public static void main(String[] args) { int arr[] = {1, 10, 30, 15}; int x = 30; int n = arr.length; System.out.printf("%d is present at index %d", x, search(arr, n, x)); } } /*This code is contributed by PrinciRaj1992*/ chevron_right filter_none Python3 filter_none edit close play_arrow link brightness_4 code # Python 3 implementation of the approach # Linearly search x in arr[]. If x is present # then return the index, otherwise return -1 def search(arr, n, x): for i in range(n): if arr[i] == x: return i return -1 # Driver Code arr = [1, 10, 30, 15] x = 30 n = len(arr) print(x, "is present at index", search(arr, n, x)) # This code is contributed # by PrinciRaj1992 chevron_right filter_none C# filter_none edit close play_arrow link brightness_4 code // C# implementation of the approach using System; public class GFG { // Linearly search x in arr[]. If x is present then return the index, // otherwise return -1 static int search(int []arr, int n, int x) { int i; for (i = 0; i < n; i++) { if (arr[i] == x) { return i; } } return -1; } /* Driver program to test above functions*/ public static void Main() { int []arr = {1, 10, 30, 15}; int x = 30; int n = arr.Length; Console.WriteLine(x+" is present at index "+search(arr, n, x)); } } /*This code is contributed by PrinciRaj1992*/ chevron_right filter_none PHP filter_none edit close play_arrow link brightness_4 code <?php // PHP implementation of the approach // Linearly search x in arr[]. If x // is present then return the index, // otherwise return -1 function search($arr, $n, $x) { for ($i = 0; $i < $n; $i++) { if ($arr[$i] == $x) return $i; } return -1; } // Driver Code $arr = array(1, 10, 30, 15); $x = 30; $n = sizeof($arr); echo $x . " is present at index ". search($arr, $n, $x); // This code is contributed // by Akanksha Rai chevron_right filter_none Output: 30 is present at index 2 Worst Case Analysis (Usually Done) In the worst case analysis, we calculate upper bound on running time of an algorithm. We must know the case that causes maximum number of operations to be executed. For Linear Search, the worst case happens when the element to be searched (x in the above code) is not present in the array. When x is not present, the search() functions compares it with all the elements of arr[] one by one. Therefore, the worst case time complexity of linear search would be Θ(n). Average Case Analysis (Sometimes done) In average case analysis, we take all possible inputs and calculate computing time for all of the inputs. Sum all the calculated values and divide the sum by total number of inputs. We must know (or predict) distribution of cases. For the linear search problem, let us assume that all cases are uniformly distributed (including the case of x not being present in array). So we sum all the cases and divide the sum by (n+1). Following is the value of average case time complexity. Average Case Time =                   =                    = Θ(n) Best Case Analysis (Bogus) In the best case analysis, we calculate lower bound on running time of an algorithm. We must know the case that causes minimum number of operations to be executed. In the linear search problem, the best case occurs when x is present at the first location. The number of operations in the best case is constant (not dependent on n). So time complexity in the best case would be Θ(1) Most of the times, we do worst case analysis to analyze algorithms. In the worst analysis, we guarantee an upper bound on the running time of an algorithm which is good information. The average case analysis is not easy to do in most of the practical cases and it is rarely done. In the average case analysis, we must know (or predict) the mathematical distribution of all possible inputs. The Best Case analysis is bogus. Guaranteeing a lower bound on an algorithm doesn’t provide any information as in the worst case, an algorithm may take years to run. For some algorithms, all the cases are asymptotically same, i.e., there are no worst and best cases. For example, Merge Sort. Merge Sort does Θ(nLogn) operations in all cases. Most of the other sorting algorithms have worst and best cases. For example, in the typical implementation of Quick Sort (where pivot is chosen as a corner element), the worst occurs when the input array is already sorted and the best occur when the pivot elements always divide array in two halves. For insertion sort, the worst case occurs when the array is reverse sorted and the best case occurs when the array is sorted in the same order as output. Next – | Set 3 (Asymptotic Notations) References: MIT’s Video lecture 1 on Introduction to Algorithms. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Recommended Posts: | Set 1 (Asymptotic Analysis) | Set 4 (Analysis of Loops) | Big-O analysis | Set 5 (Practice Problems) Analysis of algorithms | little o and little omega notations | Set 3 (Asymptotic Notations) Asymptotic Analysis and comparison of sorting algorithms Algorithms Sample Questions | Set 3 | Time Order Analysis Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) Don’t Forget The Edge Cases ! Analysis of different sorting techniques Average of Cubes of first N natural numbers Complexity Analysis of Binary Search Analysis of Algorithm | Set 4 (Solving Recurrences) Amortized analysis for increment in counter Difference between Posteriori and Priori analysis Find array elements that are greater than average Complexity analysis of various operations of Binary Min Heap Practice Questions on Time Complexity Analysis Time Complexity Analysis | Tower Of Hanoi (Recursion) Improved By : princiraj1992, Akanksha_Rai, AnkurChattopadhyay Article Tags : Analysis Articles thumb_up 117 To-do Done 1.5 Based on 325 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page | Set 1 (Asymptotic Analysis) Next last_page Reservoir Sampling Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Last digit of a number raised to last digit of N factorial Proof that traveling salesman problem is NP Hard Proof that Hamiltonian Cycle is NP-Complete Proof that Dominant Set of a Graph is NP-Complete Two player game in which a player can remove all occurrences of a number Most visited in Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ... Must Do Coding Questions Company-wise Average of Cubes of first N natural numbers Sum of bit differences for numbers from 0 to N Logarithm tricks for Competitive Programming ✍ Write a Testimonial ⇣ 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.org COMPANY About Us Careers Privacy Policy Contact Us LEARN Algorithms Data Structures Languages CS Subjects Video Tutorials PRACTICE Courses Company-wise Topic-wise How to begin? CONTRIBUTE Write an Article Write Interview Experience Internships Videos @geeksforgeeks, Some rights reserved