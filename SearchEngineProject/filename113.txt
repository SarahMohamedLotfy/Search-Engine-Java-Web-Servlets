Huffman Coding | Greedy Algo-3 - GeeksforGeeks , GeeksforGeeks × search Custom Search x menu Skip to content Tutorialskeyboard_arrow_down Studentskeyboard_arrow_down MenuTutorials- Algorithms-- Analysis of Algorithms--- Asymptotic Analysis--- Worst, Average and Best Cases--- Asymptotic Notations--- Little o and little omega notations--- Lower and Upper Bound Theory--- Analysis of Loops--- Solving Recurrences--- Amortized Analysis--- What does ‘Space Complexity’ mean?--- Pseudo-polynomial Algorithms--- Polynomial Time Approximation Scheme--- A Time Complexity Question-- Searching Algorithms-- Sorting Algorithms-- Graph Algorithms-- Pattern Searching-- Geometric Algorithms-- Mathematical-- Randomized Algorithms-- Greedy Algorithms-- Dynamic Programming-- Divide and Conquer-- Backtracking-- Branch and Bound-- All Algorithms- Data Structures-- Arrays-- Linked List-- Stack-- Queue-- Binary Tree-- Binary Search Tree-- Heap-- Hashing-- Graph-- Advanced Data Structure-- Matrix-- Strings-- All Data Structures- Languages-- C-- C++-- Java-- Python-- C#-- Javascript-- JQuery-- SQL-- PHP-- Scala-- Perl-- Go Language-- HTML-- CSS-- Kotlin- Interview Corner-- Company Preparation-- Top Topics-- Practice Company Questions-- Interview Experiences-- Experienced Interviews-- Internship Interviews-- Competitive Programming-- Design Patterns-- Multiple Choice Quizzes- GATE-- GATE CS Notes 2020-- Last Minute Notes-- GATE CS Solved Papers-- GATE CS Orignal Papers and Official Keys-- GATE 2020 Dates-- GATE CS 2020 Syllabus-- Important Topics for GATE CS-- Sudo GATE 2021- ISRO CS-- ISRO CS Solved Papers-- ISRO CS Original Papers and Official Keys-- ISRO CS Syllabus for Scientist/Engineer Exam- UGC NET CS-- UGC NET CS Notes Paper II-- UGC NET CS Notes Paper III-- UGC NET CS Solved Papers- CS Subjects-- Mathematics-- Operating Systems-- DBMS-- Computer Networks-- Computer Organization and Architecture-- Theory of Computation-- Compiler Design-- Digital Logic-- Software Engineering- Web Technologies-- HTML-- CSS-- JavaScript-- PHP-- JQueryStudents- Get Hired- Campus Ambassador Program- Project- Geek of the Month- Campus Geek of the Month- Placement Course- Competitive Programming- Testimonials- Geek on the Top- Careers- Internship Courses Algorithms expand_more Data Structures expand_more Languages expand_more Interview expand_more Students expand_more GATE expand_more CS Subjects expand_more Quizzes expand_more GBlog Puzzles What’s New? × search Custom Search Login Hire with us!Huffman Coding | Greedy Algo-3 , GeeksforGeeks × search Custom Search x menu Skip to content Tutorialskeyboard_arrow_down Studentskeyboard_arrow_down MenuTutorials- Algorithms-- Analysis of Algorithms--- Asymptotic Analysis--- Worst, Average and Best Cases--- Asymptotic Notations--- Little o and little omega notations--- Lower and Upper Bound Theory--- Analysis of Loops--- Solving Recurrences--- Amortized Analysis--- What does ‘Space Complexity’ mean?--- Pseudo-polynomial Algorithms--- Polynomial Time Approximation Scheme--- A Time Complexity Question-- Searching Algorithms-- Sorting Algorithms-- Graph Algorithms-- Pattern Searching-- Geometric Algorithms-- Mathematical-- Randomized Algorithms-- Greedy Algorithms-- Dynamic Programming-- Divide and Conquer-- Backtracking-- Branch and Bound-- All Algorithms- Data Structures-- Arrays-- Linked List-- Stack-- Queue-- Binary Tree-- Binary Search Tree-- Heap-- Hashing-- Graph-- Advanced Data Structure-- Matrix-- Strings-- All Data Structures- Languages-- C-- C++-- Java-- Python-- C#-- Javascript-- JQuery-- SQL-- PHP-- Scala-- Perl-- Go Language-- HTML-- CSS-- Kotlin- Interview Corner-- Company Preparation-- Top Topics-- Practice Company Questions-- Interview Experiences-- Experienced Interviews-- Internship Interviews-- Competitive Programming-- Design Patterns-- Multiple Choice Quizzes- GATE-- GATE CS Notes 2020-- Last Minute Notes-- GATE CS Solved Papers-- GATE CS Orignal Papers and Official Keys-- GATE 2020 Dates-- GATE CS 2020 Syllabus-- Important Topics for GATE CS-- Sudo GATE 2021- ISRO CS-- ISRO CS Solved Papers-- ISRO CS Original Papers and Official Keys-- ISRO CS Syllabus for Scientist/Engineer Exam- UGC NET CS-- UGC NET CS Notes Paper II-- UGC NET CS Notes Paper III-- UGC NET CS Solved Papers- CS Subjects-- Mathematics-- Operating Systems-- DBMS-- Computer Networks-- Computer Organization and Architecture-- Theory of Computation-- Compiler Design-- Digital Logic-- Software Engineering- Web Technologies-- HTML-- CSS-- JavaScript-- PHP-- JQueryStudents- Get Hired- Campus Ambassador Program- Project- Geek of the Month- Campus Geek of the Month- Placement Course- Competitive Programming- Testimonials- Geek on the Top- Careers- Internship Courses Algorithms expand_more Data Structures expand_more Languages expand_more Interview expand_more Students expand_more GATE expand_more CS Subjects expand_more Quizzes expand_more GBlog Puzzles What’s New? × search Custom Search Login Hire with us! ▲ |Efficient for Sorted Input | Greedy Algo-4 Minimize the maximum difference between adjacent elements in an array Number of pairs in an array with the sum greater than 0 Minimum salary hike for each employee such that no employee feels unfair using Priority Queue Find lexicographically smallest string in at most one swaps Maximum profit by buying and selling a share at most K times | Greedy Approach Why Prim’s and Kruskal's MST algorithm fails for Directed Graph? Sum of all subarrays of size K Extended Knapsack Problem Maximum size of square such that all submatrices of that size have sum less than K Longest increasing sub-sequence formed by concatenating array to itself N times Count the elements having frequency equals to its value Find the maximum sum (a+b) for a given input integer N satisfying the given condition Minimum cost to make an Array a permutation of first N natural numbers Maximum Possible Rating of a Coding Contest Length of the Smallest Subarray that must be removed in order to Maximise the GCD Count number of triangles possible for the given sides range Shortest path in a directed graph by Dijkstra’s algorithm Find the largest number smaller than integer N with maximum number of set bits Find subarray of Length K with Maximum Peak Minimum number of colors required to color a Circular Array Find the String having each substring with exactly K distinct characters Smallest Palindromic Subsequence of Even Length in Range [L, R] Find the Number of Permutations that satisfy the given condition in an array Largest lexicographical string with at most K consecutive elements Count of subarrays having exactly K prime numbers XOR of pairwise sum of every unordered pairs in an array Count elements in first Array with absolute difference greater than K with an element in second Array |Prefix Codes, means the codes (bit sequences) are assigned in such a way that the code assigned to one character is not the prefix of code assigned to any other character. This is how makes sure that there is no ambiguity when decoding the generated bitstream. Let us understand prefix codes with a counter example. Let there be four characters a, b, c and d, and their corresponding variable length codes be 00, 01, 0 and 1. This coding leads to ambiguity because code assigned to c is the prefix of codes assigned to a and b. If the compressed bit stream is 0001, the de-compressed output may be “cccd” or “ccb” or “acd” or “ab”. See this for applications of Huffman Coding. There are mainly two major parts in 1) Build a Huffman Tree from input characters. 2) Traverse the Huffman Tree and assign codes to characters. Steps to build Huffman Tree Input is an array of unique characters along with their frequency of occurrences and output is Huffman Tree. 1. Create a leaf node for each unique character and build a min heap of all leaf nodes (Min Heap is used as a priority queue. The value of frequency field is used to compare two nodes in min heap. Initially, the least frequent character is at root) 2. Extract two nodes with the minimum frequency from the min heap. 3. Create a new internal node with a frequency equal to the sum of the two nodes frequencies. Make the first extracted node as its left child and the other extracted node as its right child. Add this node to the min heap. 4. Repeat steps#2 and #3 until the heap contains only one node. The remaining node is the root node and the tree is complete. Let us understand the algorithm with an example: character   Frequency
    a            5
    b           9
    c           12
    d           13
    e           16
    f           45 Step 1. Build a min heap that contains 6 nodes where each node represents root of a tree with single node. Step 2 Extract two minimum frequency nodes from min heap. Add a new internal node with frequency 5 + 9 = 14. Now min heap contains 5 nodes where 4 nodes are roots of trees with single element each, and one heap node is root of tree with 3 elements character           Frequency
       c               12
       d               13
 Internal Node         14
       e               16
       f                45
 Step 3: Extract two minimum frequency nodes from heap. Add a new internal node with frequency 12 + 13 = 25 Now min heap contains 4 nodes where 2 nodes are roots of trees with single element each, and two heap nodes are root of tree with more than one nodes. character           Frequency
Internal Node          14
       e               16
Internal Node          25
       f               45
 Step 4: Extract two minimum frequency nodes. Add a new internal node with frequency 14 + 16 = 30 Now min heap contains 3 nodes. character          Frequency
Internal Node         25
Internal Node         30
      f               45 Step 5: Extract two minimum frequency nodes. Add a new internal node with frequency 25 + 30 = 55 Now min heap contains 2 nodes. character     Frequency
       f         45
Internal Node    55 Step 6: Extract two minimum frequency nodes. Add a new internal node with frequency 45 + 55 = 100 Now min heap contains only one node. character      Frequency
Internal Node    100 Since the heap contains only one node, the algorithm stops here. Steps to print codes from Huffman Tree: Traverse the tree formed starting from the root. Maintain an auxiliary array. While moving to the left child, write 0 to the array. While moving to the right child, write 1 to the array. Print the array when a leaf node is encountered. The codes are as follows: character   code-word
    f          0
    c          100
    d          101
    a          1100
    b          1101
    e          111 Recommended: Please solve it on “PRACTICE” first, before moving on to the solution. Below is the implementation of above approach: C C++ C++ using STL Java C C++ filter_none edit close play_arrow link brightness_4 code // C++ program for #include <iostream> #include <cstdlib> using namespace std; // This constant can be avoided by explicitly // calculating height of Huffman Tree #define MAX_TREE_HT 100 // A Huffman tree node struct MinHeapNode { // One of the input characters char data; // Frequency of the character unsigned freq; // Left and right child of this node struct MinHeapNode *left, *right; }; // A Min Heap: Collection of // min-heap (or Huffman tree) nodes struct MinHeap { // Current size of min heap unsigned size; // capacity of min heap unsigned capacity; // Attay of minheap node pointers struct MinHeapNode** array; }; // A utility function allocate a new // min heap node with given character // and frequency of the character struct MinHeapNode* newNode(char data, unsigned freq) { struct MinHeapNode* temp = (struct MinHeapNode*)malloc (sizeof(struct MinHeapNode)); temp->left = temp->right = NULL; temp->data = data; temp->freq = freq; return temp; } // A utility function to create // a min heap of given capacity struct MinHeap* createMinHeap(unsigned capacity) { struct MinHeap* minHeap = (struct MinHeap*)malloc(sizeof(struct MinHeap)); // current size is 0 minHeap->size = 0; minHeap->capacity = capacity; minHeap->array = (struct MinHeapNode**)malloc(minHeap-> capacity * sizeof(struct MinHeapNode*)); return minHeap; } // A utility function to // swap two min heap nodes void swapMinHeapNode(struct MinHeapNode** a, struct MinHeapNode** b) { struct MinHeapNode* t = *a; *a = *b; *b = t; } // The standard minHeapify function. void minHeapify(struct MinHeap* minHeap, int idx) { int smallest = idx; int left = 2 * idx + 1; int right = 2 * idx + 2; if (left < minHeap->size && minHeap->array[left]-> freq < minHeap->array[smallest]->freq) smallest = left; if (right < minHeap->size && minHeap->array[right]-> freq < minHeap->array[smallest]->freq) smallest = right; if (smallest != idx) { swapMinHeapNode(&minHeap->array[smallest], &minHeap->array[idx]); minHeapify(minHeap, smallest); } } // A utility function to check // if size of heap is 1 or not int isSizeOne(struct MinHeap* minHeap) { return (minHeap->size == 1); } // A standard function to extract // minimum value node from heap struct MinHeapNode* extractMin(struct MinHeap* minHeap) { struct MinHeapNode* temp = minHeap->array[0]; minHeap->array[0] = minHeap->array[minHeap->size - 1]; --minHeap->size; minHeapify(minHeap, 0); return temp; } // A utility function to insert // a new node to Min Heap void insertMinHeap(struct MinHeap* minHeap, struct MinHeapNode* minHeapNode) { ++minHeap->size; int i = minHeap->size - 1; while (i && minHeapNode->freq < minHeap->array[(i - 1) / 2]->freq) { minHeap->array[i] = minHeap->array[(i - 1) / 2]; i = (i - 1) / 2; } minHeap->array[i] = minHeapNode; } // A standard function to build min heap void buildMinHeap(struct MinHeap* minHeap) { int n = minHeap->size - 1; int i; for (i = (n - 1) / 2; i >= 0; --i) minHeapify(minHeap, i); } // A utility function to print an array of size n void printArr(int arr[], int n) { int i; for (i = 0; i < n; ++i) cout<< arr[i]; cout<<"\n"; } // Utility function to check if this node is leaf int isLeaf(struct MinHeapNode* root) { return !(root->left) && !(root->right); } // Creates a min heap of capacity // equal to size and inserts all character of // data[] in min heap. Initially size of // min heap is equal to capacity struct MinHeap* createAndBuildMinHeap(char data[], int freq[], int size) { struct MinHeap* minHeap = createMinHeap(size); for (int i = 0; i < size; ++i) minHeap->array[i] = newNode(data[i], freq[i]); minHeap->size = size; buildMinHeap(minHeap); return minHeap; } // The main function that builds Huffman tree struct MinHeapNode* buildHuffmanTree(char data[], int freq[], int size) { struct MinHeapNode *left, *right, *top; // Step 1: Create a min heap of capacity // equal to size. Initially, there are // modes equal to size. struct MinHeap* minHeap = createAndBuildMinHeap(data, freq, size); // Iterate while size of heap doesn't become 1 while (!isSizeOne(minHeap)) { // Step 2: Extract the two minimum // freq items from min heap left = extractMin(minHeap); right = extractMin(minHeap); // Step 3: Create a new internal // node with frequency equal to the // sum of the two nodes frequencies. // Make the two extracted node as // left and right children of this new node. // Add this node to the min heap // '$' is a special value for internal nodes, not used top = newNode('$', left->freq + right->freq); top->left = left; top->right = right; insertMinHeap(minHeap, top); } // Step 4: The remaining node is the // root node and the tree is complete. return extractMin(minHeap); } // Prints huffman codes from the root of Huffman Tree. // It uses arr[] to store codes void printCodes(struct MinHeapNode* root, int arr[], int top) { // Assign 0 to left edge and recur if (root->left) { arr[top] = 0; printCodes(root->left, arr, top + 1); } // Assign 1 to right edge and recur if (root->right) { arr[top] = 1; printCodes(root->right, arr, top + 1); } // If this is a leaf node, then // it contains one of the input // characters, print the character // and its code from arr[] if (isLeaf(root)) { cout<< root->data <<": "; printArr(arr, top); } } // The main function that builds a // Huffman Tree and print codes by traversing // the built Huffman Tree void HuffmanCodes(char data[], int freq[], int size) { // Construct Huffman Tree struct MinHeapNode* root = buildHuffmanTree(data, freq, size); // Print Huffman codes using // the Huffman tree built above int arr[MAX_TREE_HT], top = 0; printCodes(root, arr, top); } // Driver program to test above functions int main() { char arr[] = { 'a', 'b', 'c', 'd', 'e', 'f' }; int freq[] = { 5, 9, 12, 13, 16, 45 }; int size = sizeof(arr) / sizeof(arr[0]); HuffmanCodes(arr, freq, size); return 0; } C++ using STL Java f: 0
c: 100
d: 101
a: 1100
b: 1101
e: 111 Time complexity: O(nlogn) where n is the number of unique characters. If there are n nodes, extractMin() is called 2*(n – 1) times. extractMin() takes O(logn) time as it calles minHeapify(). So, overall complexity is O(nlogn). If the input array is sorted, there exists a linear time algorithm. We will soon be discussing in our next post. Reference: http://en.wikipedia.org/wiki/Huffman_coding This article is compiled by Aashish Barnwal and reviewed by GeeksforGeeks team. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Don’t stop now and take your learning to the next level. Learn all the important concepts of Data Structures and Algorithms with the help of the most trusted course: DSA Self Paced. Become industry ready at a student-friendly price. Recommended Posts: Efficient for Sorted Input | Greedy Algo-4 Canonical using Priority Queue Image Compression using Huffman Decoding Practice Questions on Huffman Encoding Correctness of Greedy Algorithms Boruvka's algorithm | Greedy Algo-9 Graph Coloring | Set 2 (Greedy Algorithm) Greedy Algorithm for Egyptian Fraction Top 20 Greedy Algorithms Interview Questions Greedy approach vs Dynamic programming Set Cover Problem | Set 1 (Greedy Approximate Algorithm) Greedy Algorithms (General Structure and Applications) Coin game of two corners (Greedy Approach) K Centers Problem | Set 1 (Greedy Approximate Algorithm) Activity Selection Problem | Greedy Algo-1 Prim’s MST for Adjacency List Representation | Greedy Algo-6 Prim’s Minimum Spanning Tree (MST) | Greedy Algo-5 Greedy Algorithm to find Minimum number of Coins Improved By : kddeepak, SoumikMondal, AyushShaZz Article Tags : Greedy Heap Amazon encoding-decoding Morgan Stanley priority-queue Samsung United Health Group Practice Tags : Morgan Stanley Amazon Samsung United Health Group Greedy Heap priority-queue thumb_up 62 To-do Done 4.1 Based on 191 vote(s) Feedback/ Suggest ImprovementImprove Article Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Kruskal’s Minimum Spanning Tree Algorithm | Greedy Algo-2 Next last_page Efficient for Sorted Input | Greedy Algo-4 Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Greedy Longest subsequence consisting of alternate vowels and consonants Maximize count of corresponding same elements in given Arrays by Rotation Find sum of product of every number and its frequency in given range Count of distinct colors in a subtree of a Colored Tree with given min frequency for Q queries Subsequence with maximum pairwise absolute difference and minimum size Most visited in Heap Real-time application of Data Structures Max Heap in Python Min Heap in Python Last element remaining by deleting two largest elements and replacing by their absolute difference if they are unequal Find Non-overlapping intervals among a given set of intervals 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.org COMPANY About Us Careers Privacy Policy Contact Us LEARN Algorithms Data Structures Languages CS Subjects Video Tutorials PRACTICE Courses Company-wise Topic-wise How to begin? CONTRIBUTE Write an Article Write Interview Experience Internships Videos @geeksforgeeks, Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !